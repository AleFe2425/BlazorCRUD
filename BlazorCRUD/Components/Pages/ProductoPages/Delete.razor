@page "/productos/delete" /*ruta para acceder pagina elimninacion*/
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.Models
@inject IDbContextFactory<BlazorCRUD.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Eliminar</h1>

<p>Estas Seguro Que Quieres Eliminar Este Producto?</p>
<div>
    <h2>Producto</h2>
    <hr />
    @if (producto is null)//verificamos si el producto es nulo
    {
        <p><em>Loading...</em></p>//mensaje si el producto ha sido cargado
    }
    else { //muestra los detalles del producto si se cargo 
        <dl class="row">
            <dt class="col-sm-2">Nombre</dt>
            <dd class="col-sm-10">@producto.Nombre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Precio</dt>
            <dd class="col-sm-10">@producto.Precio</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Qty</dt>
            <dd class="col-sm-10">@producto.Qty</dd>
        </dl>
        <EditForm method="post" Model="producto" OnValidSubmit="DeleteProducto" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(producto is null)">Eliminar</button> |
            <a href="/productos" class="btn btn-outline-secondary">Regresar</a>
        </EditForm>
    }
</div>

@code {
    private Producto? producto; // Propiedad para almacenar el producto a eliminar.

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync() // Método que se ejecuta cuando se inicializa el componente.
    {
        using var context = DbFactory.CreateDbContext();
        producto = await context.Producto.FirstOrDefaultAsync(m => m.Id == Id);

        if (producto is null) // Si no se encuentra el producto, redirige a la página de no encontrado.
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProducto()//metodo usado para eliminar el producto 
    {
        using var context = DbFactory.CreateDbContext();//crear instanacio del contexto en la DB
        context.Producto.Remove(producto!);//Elimina el Producto
        await context.SaveChangesAsync();//se guardan los cambios en la DB
        NavigationManager.NavigateTo("/productos");//redirige a la pagina de lista de produtos
    }
}
