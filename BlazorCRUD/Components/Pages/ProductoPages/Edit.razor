@page "/productos/edit" /*ruta de acceso para ingresar a esta pagina*/
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.Models
@inject IDbContextFactory<BlazorCRUD.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Editar</h1>

<h2>En Esta Página se Puede Editar el Producto Seleccionado</h2>
<hr />
@if (Producto is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Producto" OnValidSubmit="UpdateProducto" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Producto.Id" value="@Producto.Id" />
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" @bind-Value="Producto.Nombre" class="form-control" />
                    <ValidationMessage For="() => Producto.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="precio" class="form-label">Precio:</label>
                    <InputNumber id="precio" @bind-Value="Producto.Precio" class="form-control" />
                    <ValidationMessage For="() => Producto.Precio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="qty" class="form-label">Qty:</label>
                    <InputNumber id="qty" @bind-Value="Producto.Qty" class="form-control" />
                    <ValidationMessage For="() => Producto.Qty" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Guardar</button>
                |
                <a href="/productos" class="btn btn-outline-secondary">Regresar</a>
            </EditForm>
        </div>
    </div>
}



@code {
    [SupplyParameterFromQuery] // Permite que el parámetro ID sea proporcionado desde la URL como un parámetro de consulta.
    private Guid Id { get; set; }

    [SupplyParameterFromForm] // Permite que el modelo Producto sea proporcionado desde el formulario.
    private Producto? Producto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Producto ??= await context.Producto.FirstOrDefaultAsync(m => m.Id == Id);

        if (Producto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    

    // Método para actualizar el producto en la base de datos.
    private async Task UpdateProducto()
    {
        using var context = DbFactory.CreateDbContext();// Crea una nueva instancia del contexto de la base de datos.
        context.Attach(Producto!).State = EntityState.Modified;// Marca el producto como modificado.

        try
        {
            await context.SaveChangesAsync(); // Guarda los cambios en la base de datos.
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductoExists(Producto!.Id)) // Verifica si el producto todavía existe.
            {
                NavigationManager.NavigateTo("notfound"); //si no nos redirige a no encontrado
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/productos"); // Redirige a la lista de productos después de guardar.
    }


    // Método para verificar si el producto existe en la base de datos.

    private bool ProductoExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext(); // Crea una nueva instancia del contexto de la base de datos.
        return context.Producto.Any(e => e.Id == id); // Verifica si existe un producto con el ID proporcionado.
    }  
}
