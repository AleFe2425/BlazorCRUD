@page "/productos/details"
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.Models
@inject IDbContextFactory<BlazorCRUD.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Detalles del Producto</h1>

<div>
    <h2>En esta Pagina se Pueden Visualizar los Detalles Producto</h2>
    <hr />
    @if (producto is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nombre</dt>
            <dd class="col-sm-10">@producto.Nombre</dd>
            <dt class="col-sm-2">Precio</dt>
            <dd class="col-sm-10">@producto.Precio</dd>
            <dt class="col-sm-2">Qty</dt>
            <dd class="col-sm-10">@producto.Qty</dd>
        </dl>
        <div>
            <a href="@($"/productos/edit?id={producto.Id}")" class="btn btn-info">Editar</a> |
            <a href="@($"/productos")" class="btn btn-outline-secondary">Regresar</a>
        </div>
    }
</div>

@code {
    private Producto? producto;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        producto = await context.Producto.FirstOrDefaultAsync(m => m.Id == Id);

        if (producto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
